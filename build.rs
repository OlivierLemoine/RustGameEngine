fn main() -> Result<(), Box<dyn std::error::Error>> {
    let all_concat = ["./src/engine/math/vector2.rs",
    "./src/engine/math/curve.rs",
    "./src/engine/camera.rs",
    "./src/engine/time.rs",
    "./src/engine/object.rs",
    "./src/engine/components/transform.rs",
    "./src/engine/components/script.rs",
    "./src/engine/components/sprite.rs",
    "./src/engine/components/rigidbody.rs"]
        .iter()
        .map(|path| std::fs::read_to_string(path))
        .collect::<Result<Vec<_>, _>>()?
        .concat()
        .replace("\r\n", "\n")
        .split("\n")
        .map(|v| v.trim_end())
        .filter(|v| !v.trim_start().starts_with("//"))
        .filter(|v| !v.starts_with("#!["))
        .filter(|v| !v.starts_with("use super"))
        .filter(|v| !v.starts_with("use serde"))
        .collect::<Vec<_>>().join("\n")
        // .
        ;

    let prelude_file = format!(
        "// This file has been generated by a script, don't modify it!
#![allow(dead_code)]
pub use std::cell::RefCell;
pub use std::rc::{{Rc, Weak}};
pub use serde::Deserialize;
{}",
        all_concat
    );

    std::fs::write("./resources/entity/src/prelude.rs", &prelude_file)?;

    Ok(())
}
