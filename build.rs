fn main() -> Result<(), Box<dyn std::error::Error>> {
    let components_list_raw = std::fs::read_to_string("components.list")?;
    let components_list = components_list_raw
        .split('\n')
        .map(|v| v.trim())
        .collect::<Vec<_>>();

    let all_concat = ["./src/engine/math/vector2.rs",
    "./src/engine/math/curve.rs",
    "./src/engine/camera.rs",
    "./src/engine/time.rs",
    "./src/engine/object.rs",
    "./src/engine/components/transform.rs",
    "./src/engine/components/script.rs",
    "./src/engine/components/sprite.rs",
    "./src/engine/components/rigidbody.rs"]
        .iter()
        .map(|path| std::fs::read_to_string(path))
        .collect::<Result<Vec<_>, _>>()?
        .concat()
        .replace("\r\n", "\n")
        .split("\n")
        .map(|v| v.trim())
        .filter(|v| !v.starts_with("//"))
        .filter(|v| !v.starts_with("#!["))
        .filter(|v| !v.starts_with("use super"))
        .filter(|v| !v.starts_with("use serde"))
        .collect::<String>()
        // .
        ;

    let prelude_file = format!(
        "// This file has been generated by a script, don't modify it!
#![allow(dead_code)]
pub use std::cell::RefCell;pub use std::rc::{{Rc, Weak}};pub use serde::Deserialize;{}",
        all_concat
    );

    std::fs::write("./resources/entity/src/prelude.rs", &prelude_file)?;
    for path in components_list {
        let mut prelude_path = std::path::PathBuf::from(path);
        prelude_path.push("src");
        prelude_path.push("prelude.rs");
        std::fs::write(prelude_path, &prelude_file)?;

        let mut proc = std::process::Command::new("cargo");
        proc.current_dir(path).arg("build");
        if !cfg!(debug_assertions) {
            proc.arg("--release");
        }
        proc.spawn()?;
    }

    Ok(())
}
